global function TwinGrenades_Init
void function TwinGrenades_Init(){
    //AddPrivateMatchModeSettingEnum("#MODE_SETTING_CATEGORY_RIFFPACK", "TwinGrenades", ["#SETTING_DISABLED", "#SETTING_ENABLED"], "0")
    #if SERVER
    // modified settings
    IgnoreEquipmentsFilter( "Offhand" )
    SetLoadoutGracePeriodEnabled( false )

    //AddCallback_OnPlayerRespawned(Respawn)
    AddCallback_OnPlayerGetsNewPilotLoadout(OnPlayerChangeLoadout)
    #endif
}

bool function TwinNadesEnabled(){
    return true //GetCurrentPlaylistVarInt("TwinGrenades", 0) == 1
}


const array<string> pilotAbility = [
    "mp_ability_cloak",
    "mp_ability_grapple",
    "mp_ability_heal",
    "mp_ability_holopilot",
    "mp_ability_shifter",
    "mp_weapon_grenade_sonar",
    "mp_weapon_deployable_cover"
]
const array<string> pilotNades = [
    "mp_weapon_satchel",
    "mp_weapon_grenade_electric_smoke",
    "mp_weapon_grenade_emp",
    "mp_weapon_grenade_gravity",
    "mp_weapon_frag_grenade",
    "mp_weapon_thermite_grenade"
]
const array<string> bannedNades = [ // means these can only get from random givings, match equipmentsFilter
    "mp_weapon_frag_grenade",
    "mp_weapon_thermite_grenade"
]   
#if SERVER
void function Respawn(entity player){
    if(TwinNadesEnabled()){

        // should rework this
        /* 
        string offhand = player.GetOffhandWeapons()[OFFHAND_LEFT].GetWeaponClassName()
        if(pilotAbility.find(offhand) != -1){
            
            player.TakeWeaponNow(offhand)
            
            if(pilotNades[pilotAbility.find(offhand)] == player.GetOffhandWeapons()[OFFHAND_RIGHT].GetWeaponClassName())
                player.GiveOffhandWeapon(pilotNades[pilotAbility.find(offhand)+1], OFFHAND_LEFT)
            else
                player.GiveOffhandWeapon(pilotNades[pilotAbility.find(offhand)], OFFHAND_LEFT)    
        }
        */

        string tactical = player.GetOffhandWeapons()[OFFHAND_LEFT].GetWeaponClassName()
        string ordnance = player.GetOffhandWeapons()[OFFHAND_RIGHT].GetWeaponClassName()

        if( pilotAbility.find(tactical) != -1 )
            ReplaceTacticalWithRandomOrdnance( player, ordnance )
    }
}
void function OnPlayerChangeLoadout(entity player, PilotLoadoutDef loadout){
    if(player.GetOffhandWeapons().len() != 0){
    Respawn(player)}
}

void function ReplaceTacticalWithRandomOrdnance( entity player, string ownedOrdnance )
{
    string tactical = player.GetOffhandWeapons()[OFFHAND_LEFT].GetWeaponClassName()
    player.TakeWeaponNow( tactical )
    array<string> validOrdnances = pilotNades
    validOrdnances.removebyvalue( ownedOrdnance ) // avoid same offhand crash
    string replacement = validOrdnances[RandomInt(validOrdnances.len())]
    player.GiveOffhandWeapon( replacement, OFFHAND_LEFT )
    NotifyOffhandChange( player, tactical, replacement )
}
#endif
