untyped
global function EquipmentsFilter_Init

global struct Weapon
{
	string weapon
	array<string> mods
}

const bool WHITELIST = false
const bool BLACKLIST = true
const bool FILTER_TYPE = BLACKLIST

const Weapon PRIMARY = { weapon = "mp_weapon_rspn101_og", mods = ["extended_ammo", "pas_fast_reload", "hcog"] }
const Weapon SECONDARY = { weapon = "mp_weapon_defender", mods = ["pas_fast_swap", "pas_fast_ads"] }
const Weapon BACKUP = { weapon = "mp_weapon_autopistol", mods = ["extended_ammo", "pas_fast_reload"] }
const Weapon GRENADE = { weapon = "mp_weapon_thermite_grenade", mods = [] }
const Weapon TACTICAL = { weapon = "mp_ability_grapple", mods = [] }
const Weapon MELEE = { weapon = "melee_pilot_kunai", mods = [] }
const bool MELEESWITCH = false
const array<string> WEAPONS_LIST = ["mp_ability_cloak", "mp_weapon_deployable_cover", "mp_weapon_frag_grenade", "mp_weapon_grenade_gravity", "mp_weapon_satchel", "mp_weapon_dmr", "mp_weapon_lmg"]

const string LAST_PLAYLIST_MAP = ""
const string LAST_PLAYLIST_MAP_LF = ""

void function EquipmentsFilter_Init()
{
	SetShouldFUCKOFFCLOAK( true ) // in altpilot.gnut, no more cloak pilots model
	SetTurretAndSPDisabled( true ) // modified function in _burnmeter.gnut
	if( !MELEESWITCH )
		SetSyncedMeleeNoLimit( true ) // modified function in sh_melee.gnut, so player can do synced melee with no limit( even with no melee weapon )
	SetOverridesBaseForcedPlayList( true ) // overrides base forced playlist
	ClassicMP_ForceDisableEpilogue( true )
	SetShouldPlayFactionDialogue( false ) // player faction dialogue
	//SetPlayerRespawnForced( true ) // force player to respawn after all
	AddCallback_OnPlayerRespawned( OnPlayerRespawned ) // respawn not giving loadout, which will mess things up
	AddCallback_GameStateEnter( eGameState.Playing, OnGameStart )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_GameStateEnter( eGameState.Postmatch, OnGamePostmatch )

	// skip intro and make things faster!
	ClassicMP_SetCustomIntro( ClassicMP_DefaultNoIntro_Setup, ClassicMP_DefaultNoIntro_GetLength() )
}

void function OnPlayerRespawned( entity player )
{
	//GiveWeapon( player )
	//player.SetAimAssistAllowed( false )
	//script foreach( entity player in GetPlayerArray() ){ player.SetAimAssistAllowed( false ) }
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{
	GiveWeapon( player )
}

void function OnGameStart()
{
	SetPlayerDeathsHidden( true ) // let's not count player's deaths!
}

void function OnGamePostmatch()
{
	thread FilterForcedPlaylist()
}

void function GiveWeapon( entity player )
{
 	bool hasAllowedWeapon = false

	foreach ( int enum_, entity weapon in player.GetMainWeapons() )
	{
		if ( FILTER_TYPE == IsOnList( weapon.GetWeaponClassName() ) )
		{
			player.TakeWeaponNow( weapon.GetWeaponClassName() )

			switch ( enum_ ) 
			{
				case 0:
					if ( PRIMARY.weapon != "")
						player.GiveWeapon( PRIMARY.weapon, PRIMARY.mods )
					break
				case 1:
					if ( SECONDARY.weapon != "")
						player.GiveWeapon( SECONDARY.weapon, SECONDARY.mods	)
					break
				case 2:
					if ( BACKUP.weapon != "")
						player.GiveWeapon( BACKUP.weapon, BACKUP.mods )
					break
				default:
					break
			}
		}
	}

	foreach( int enum_, entity weapon in player.GetOffhandWeapons() )
	{
		player.TakeWeaponNow( "melee_pilot_emptyhanded" )
		if( MELEESWITCH )
			player.GiveOffhandWeapon( MELEE.weapon, OFFHAND_MELEE, MELEE.mods )

		if( FILTER_TYPE == IsOnList( weapon.GetWeaponClassName() ) )
		{
			player.TakeWeaponNow( weapon.GetWeaponClassName() )

			switch( enum_ )
			{
				case 0:
					if( GRENADE.weapon != "" )
						player.GiveOffhandWeapon( GRENADE.weapon, OFFHAND_ORDNANCE, GRENADE.mods )
					break
				case 1:
					if( TACTICAL.weapon != "" )
						player.GiveOffhandWeapon( TACTICAL.weapon, OFFHAND_SPECIAL, TACTICAL.mods )
					break
				default:
					break
			}
		}
	}
}

bool function IsOnList( string w )
{
	foreach ( weapon in WEAPONS_LIST ) {
		if ( weapon == w )	return true
	}
	return false
}

void function FilterForcedPlaylist()
{
	string curMapName = GetMapName()
    wait 5
    switch( curMapName )
    {
        case "mp_glitch":
            ServerCommand( "map mp_colony02" )
			break
        case "mp_colony02":
            ServerCommand( "map mp_wargames" )
			break
        case "mp_wargames":
            ServerCommand( "map mp_eden" )
			break
        case "mp_eden":
            ServerCommand( "map mp_drydock" )
			break
        case "mp_drydock":
            ServerCommand( "map mp_black_water_canal" )
			break
        case "mp_black_water_canal":
            ServerCommand( "map mp_thaw" )
			break
        case "mp_thaw":
            ServerCommand( "map mp_grave" )
			break
        case "mp_grave":
            ServerCommand( "map mp_homestead" )
			break
        case "mp_homestead":
            ServerCommand( "map mp_forwardbase_kodai" )
			break
        case "mp_forwardbase_kodai":
            ServerCommand( "map mp_angel_city" )
			break
        case "mp_angel_city":
            ServerCommand( "map mp_complex3" )
			break
		case "mp_complex3":
            ServerCommand( "map mp_relic02" )
			break
		case "mp_relic02":
            ServerCommand( "map mp_glitch" )
			break
		case "mp_lf_stacks":
            ServerCommand( "map mp_lf_meadow" )
			break
		case "mp_lf_meadow":
            ServerCommand( "map mp_lf_deck" )
			break
		case "mp_lf_deck":
            ServerCommand( "map mp_lf_traffic" )
			break
		case "mp_lf_traffic":
            ServerCommand( "map mp_lf_township" )
			break
		case "mp_lf_township":
            ServerCommand( "map mp_lf_uma" )
			break
		case "mp_lf_uma":
            ServerCommand( "map mp_lf_stacks" )
			break
		default:
            ServerCommand( "map mp_glitch" )
    }
}