untyped
#if SERVER
global function FireArcBall_NonTitan
global function FireArcBall_Softball

#endif

#if SERVER
void function FireArcBall_NonTitan( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	entity weaponOwner = weapon.GetWeaponOwner()

	if ( weaponOwner.IsPlayer() )
	{
		vector angles = VectorToAngles( weaponOwner.GetViewVector() )
		vector up = AnglesToUp( angles )

		if ( weaponOwner.GetTitanSoulBeingRodeoed() != null )
			attackParams.pos = attackParams.pos + up * 20
	}

	bool shouldPredict = weapon.ShouldPredictProjectiles()

	float speed = 450.0

	vector attackPos = attackParams.pos
	vector attackDir = attackParams.dir

	FireArcBall( weapon, attackPos, attackDir, shouldPredict, 350 )

	weapon.EmitWeaponSound_1p3p( "Weapon_ArcLauncher_Fire_1P", "Weapon_ArcLauncher_Fire_3P" )
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
}

void function FireArcBall_Softball( entity weapon, vector pos, vector dir, bool shouldPredict, float damage = BALL_LIGHTNING_DAMAGE, bool isCharged = false )
{
	entity owner = weapon.GetWeaponOwner()

	float speed = 500.0

	if ( isCharged )
		speed = 350.0

	if ( owner.IsPlayer() )
	{
		vector myVelocity = owner.GetVelocity()

		float mySpeed = Length( myVelocity )

		myVelocity = Normalize( myVelocity )

		float dotProduct = DotProduct( myVelocity, dir )

		dotProduct = max( 0, dotProduct )

		speed = speed + ( mySpeed*dotProduct )
	}

	int team = TEAM_UNASSIGNED
	if ( IsValid( owner ) )
		team = owner.GetTeam()

	entity bolt = weapon.FireWeaponBolt( pos, dir, speed, damageTypes.arcCannon | DF_IMPACT, damageTypes.arcCannon | DF_EXPLOSION, shouldPredict, 0 )
	if ( bolt != null )
	{
		bolt.SetModel( $"models/dev/empty_model.mdl" )
		bolt.kv.rendercolor = "0 0 0"
		bolt.kv.renderamt = 0
		
		SetTeam( bolt, team )

		float lifetime = 8.0

		if ( isCharged )
		{
			bolt.SetProjectilTrailEffectIndex( 1 )
			lifetime = 20.0
		}

		bolt.SetProjectileLifetime( lifetime )

		AttachBallLightning( weapon, bolt )

		entity ballLightning = expect entity( bolt.s.ballLightning )

		ballLightning.e.ballLightningData.damage = damage

		/*{
			// HACK: bolts don't have collision so...
			entity collision = CreateEntity( "prop_script" )

			collision.SetValueForModelKey( ARC_BALL_COLL_MODEL )
			collision.kv.fadedist = -1
			collision.kv.physdamagescale = 0.1
			collision.kv.inertiaScale = 1.0
			collision.kv.renderamt = 255
			collision.kv.rendercolor = "255 255 255"
			collision.kv.rendermode = 10
			collision.kv.solid = SOLID_VPHYSICS
			collision.SetOwner( owner )
			collision.SetOrigin( bolt.GetOrigin() )
			collision.SetAngles( bolt.GetAngles() )
			SetTargetName( collision, "Arc Ball" )
			SetVisibleEntitiesInConeQueriableEnabled( collision, true )

			DispatchSpawn( collision )

			collision.SetParent( bolt )
			collision.SetMaxHealth( 250 )
			collision.SetHealth( 250 )
			AddEntityCallback_OnDamaged( collision, OnArcBallCollDamaged )

			thread TrackCollision( collision, bolt )
		}*/
	}
}
#endif