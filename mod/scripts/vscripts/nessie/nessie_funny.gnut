global function Nessie_Funny_Functions_Init

global function TEMP_RGB_Hightlight
global function TEMP_IMSB_Title

global function RainbowPlayerSkin
global function RainbowWeaponSkin

global function RGY_BatterySkin
global function HoloFlash

global function TTF1_WeaponUsage

void function Nessie_Funny_Functions_Init()
{
    RegisterSignal( "StartRGBHighlight" )
	RegisterSignal( "EndRGBHighlight" )
    RegisterSignal( "StartSBTitle" )
	RegisterSignal( "EndSBTitle" )
	RegisterSignal( "StartRainbowPlayer" )
	RegisterSignal( "EndRainbowPlayer" )
	RegisterSignal( "StartRainbowWeapon" )
	RegisterSignal( "EndRainbowWeapon" )
	RegisterSignal( "StartRGYBattery" )
	RegisterSignal( "EndRGYBattery" )
}

void function TEMP_RGB_Hightlight( entity ent, bool showToAll = false )
{
	OnThreadEnd(
		function(): ( ent )
		{
			if( IsValid( ent ) )
			{
				Highlight_ClearFriendlyHighlight( ent )
				Highlight_ClearEnemyHighlight( ent )
				Highlight_ClearNeutralHighlight( ent )
			}
		}
	)
	ent.Signal( "StartRGBHighlight" )
	ent.EndSignal( "OnDestroy" )
	ent.EndSignal( "OnDeath" )
	ent.EndSignal( "StartRGBHighlight" )
	ent.EndSignal( "EndRGBHighlight" )
	Highlight_SetFriendlyHighlight( ent, "sp_enemy_pilot" )
	if( showToAll )
	{
		Highlight_SetEnemyHighlight( ent, "sp_enemy_pilot" )
		Highlight_SetNeutralHighlight( ent, "sp_enemy_pilot" )
	}
	array<vector> colorArray = [ < 255,0,0 >, < 0,255,0 >, < 0,0,255 > ]
	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == colorArray.len() - 1 ? 0 : index + 1

		ent.Highlight_SetParam( 1, 0, colorArray[index] ) // friendly
		if( showToAll )
		{
			ent.Highlight_SetParam( 2, 0, colorArray[index] ) // enemy
			ent.Highlight_SetParam( 0, 0, colorArray[index] ) // neutral
		}
	}
}

void function TEMP_IMSB_Title( entity ent )
{
	ent.Signal( "StartSBTitle" )
	ent.EndSignal( "OnDestroy" )
	ent.EndSignal( "OnDeath" )
	ent.EndSignal( "StartSBTitle" )
	ent.EndSignal( "EndSBTitle" )
	array<string> titleArray = [ "我是傻逼", "傻逼是我" ]
	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == titleArray.len() - 1 ? 0 : index + 1

		ent.SetTitle( titleArray[index] )
	}
}

void function RainbowPlayerSkin( entity player )
{
	if( !IsVanillaPilotModel( player ) )
		return
	player.Signal( "StartRainbowPlayer" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "StartRainbowPlayer" )
	player.EndSignal( "EndRainbowPlayer" )

	array<int> camoIndexArray = [ 14, 81, 30, 31, 17, 83, 16 ] // skin 1
	// green, pink, black, white, orange, purple, gold
	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == camoIndexArray.len() - 1 ? 0 : index + 1

		player.SetSkin( 1 )
		player.SetCamo( camoIndexArray[index] )
	}
}

bool function IsVanillaPilotModel( entity player )
{
	asset modelName = player.GetModelName()
	if( modelName == $"models/humans/pilots/pilot_medium_stalker_m.mdl" ||
		modelName == $"models/humans/pilots/pilot_medium_stalker_f.mdl" ||
		modelName == $"models/humans/pilots/pilot_light_ged_m.mdl" ||
		modelName == $"models/humans/pilots/pilot_light_ged_f.mdl" ||
		modelName == $"models/humans/pilots/pilot_light_jester_m.mdl" ||
		modelName == $"models/humans/pilots/pilot_light_jester_f.mdl" ||
		modelName == $"models/humans/pilots/pilot_medium_reaper_m.mdl" ||
		modelName == $"models/humans/pilots/pilot_medium_reaper_f.mdl" ||
		modelName == $"models/humans/pilots/pilot_medium_geist_m.mdl" ||
		modelName == $"models/humans/pilots/pilot_medium_geist_f.mdl" ||
		modelName == $"models/humans/pilots/pilot_heavy_roog_m.mdl" ||
		modelName == $"models/humans/pilots/pilot_heavy_roog_f.mdl" ||
		modelName == $"models/humans/pilots/pilot_heavy_drex_m.mdl" ||
		modelName == $"models/humans/pilots/pilot_heavy_drex_f.mdl"
	 )
	 	return true

	return false
}

void function RainbowWeaponSkin( entity weaponOwner )
{
	weaponOwner.Signal( "StartRainbowWeapon" )
	weaponOwner.EndSignal( "OnDestroy" )
	weaponOwner.EndSignal( "OnDeath" )
	weaponOwner.EndSignal( "StartRainbowWeapon" )
	weaponOwner.EndSignal( "EndRainbowWeapon" )

	array<int> camoIndexArray = [ 14, 81, 30, 31, 17, 83, 16 ] // skin 1
	// green, pink, black, white, orange, purple, gold
	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == camoIndexArray.len() - 1 ? 0 : index + 1

		foreach( entity weapon in weaponOwner.GetMainWeapons() )
		{
			weapon.SetSkin( 1 )
			weapon.SetCamo( camoIndexArray[index] )
		}
	}
}

void function RGY_BatterySkin( entity battery )
{
	if( battery.GetClassName() != "item_titan_battery" )
		return

	battery.Signal( "StartRGYBattery" )
	battery.EndSignal( "OnDestroy" )
	battery.EndSignal( "StartRGYBattery" )
	battery.EndSignal( "EndRGYBattery" )

	int index = 0
	while( true )
	{
		//print( "setting battery skin: " + string( index ) )
		WaitFrame()
		battery.SetSkin( index )
		Battery_StopFX( battery )
		if( index == 2 )
			index = 0
		else
			index++
	}
}

void function HoloFlash( entity player )
{
	int attachIndex = player.LookupAttachment( "CHESTFOCUS" )
	StartParticleEffectOnEntity( player, GetParticleSystemIndex( GHOST_TRAIL_EFFECT ), FX_PATTACH_POINT_FOLLOW, attachIndex )
	StartParticleEffectOnEntity( player, GetParticleSystemIndex( GHOST_FLASH_EFFECT ), FX_PATTACH_POINT, attachIndex )
}

// not work. onHanded animation is done in .mdl not just code
void function TTF1_WeaponUsage( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	
	while( true )
	{
		WaitFrame()
		if( player.IsWallHanging() )
			continue
		if( player.IsWallRunning() )
			player.SetOneHandedWeaponUsageOff()
	}
}